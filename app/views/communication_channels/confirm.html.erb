<%
  jammit_css :login
  @headers = false
  @body_classes << "modal"
  content_for :page_title, t(:page_title, "Register %{email}", :email => @communication_channel.path)
%>

<div id="modal-box-top"></div>
<div id='modal-box-arbitrary-size'>
  <div style="margin: 20px 10px 0">
    <h2><%= t 'titles.welcome_aboard', "Welcome aboard!" %></h2>
    <% if @current_user && @current_user != @communication_channel.user %>
      <h4><%= t 'titles.merge_self', "Merge With Your Current User" %></h4>
      <p><%= if @course
            t('details.merge_self_course', "The invitation for %{course} is for %{user1}, but you are currently logged in as %{user2}. You can combine these two accounts together and accept the invitation by clicking 'Merge'.",
             :course => @course.name, :user1 => @communication_channel.user.name, :user2 => @current_user.name)
          else
            t('details.merge_self', "The e-mail address %{email} is currently associated with %{user1}, but you are currently logged in as %{user2}. You can merge these two accounts together by clicking 'Merge'.",
              :email => @communication_channel.path, :user1 => @communication_channel.user.name, :user2 => @current_user.name)
          end
          %>
      </p>
      <a href="<%= registration_confirmation_path(@communication_channel.confirmation_code, :enrollment => @enrollment.uuid, :merge => 'self') %>" class="button"><%= t('buttons.merge', "Merge") %></a>
      <div style="clear: both;"></div>
    <% end %>
    <% if @communication_channel.user.registered?  %>
      <% # if the user is registered, it's safe to assume that @current_user == @communication_channel.user, because the only way to get to #confirm with an enrollment is a redirect from CoursesController#enrollment_invitation that makes sure you are logged in, then send sends you to confirm with a cc for the enrollment's user %>
      <% if @communication_channel.unconfirmed? %>
        <h4><%= t 'titles.confirm', "Confirm E-mail Address" %></h4>
        <p><%= t('details.confirm', "Confirm %{email} belongs to %{user} by clicking 'Confirm'.", :email => @communication_channel.path, :user => @communication_channel.user.name) %>
          <a href="<%= registration_confirmation_path(@communication_channel.confirmation_code, :confirm => 1) %>" class="button"><%= t 'buttons.confirm', "Confirm" %></a>
        </p>
        <div style="clear: both;"></div>
      <% elsif @enrollment.try(:invited?) %>
        <h4><%= t 'titles.transfer_enrollment', "Transfer Enrollment" %></h4>
        <p><%= t('details.transfer', "Alternatively, you can simply accept the invitation as %{user} by clicking 'Transfer Enrollment'.", :user => @current_user.name) %></p>
        <a href="<%= registration_confirmation_path(@communication_channel.confirmation_code, :enrollment => @enrollment.uuid, :transfer_enrollment => 1) %>" class="button"><%= t('buttons.transfer_enrollment', "Transfer Enrollment") %></a>
        <h4><%= t 'titles.accept_enrollment', "Accept Enrollment" %></h4>
        <p><%= t('details.accept_logout', "In order to accept this enrollment for %{user}, you will need to log out and log in as that user.", :user => @enrollment.user.name) %></p>
        <a href="<%= login_url(:enrollment => @enrollment.uuid, :re_login => 1) %>" class="button"><%= t('buttons.relogin', "Re-login") %></a>
        <div style="clear: both;"></div>
      <% end %>
    <% end %>

    <% if @pseudonym %>
      <h4><%= t 'titles.register', "Register New Account" %></h4>
      <p><%= if @course
          mt 'details.register_with_course', "In order to finish signing you up for the course **%{course}**, we'll need a few more pieces of information.", :course => @course.name
        elsif @pseudonym
          t 'details.register', "In order to finish signing you up, we'll need a few more pieces of information."
        end %></p>
      <%= (error_messages_for :object => [@user, @pseudonym], :header_message => nil).gsub("Unique", "Login") %>
      <% form_for :pseudonym, :url => registration_confirmation_url(@communication_channel.confirmation_code), :html => {:id => "registration_confirmation_form"} do |form| %>
      <input type="hidden" name="register" value="1"/>
      <table class="formtable">
        <tr>
          <td><%= blabel :pseudonym, :unique_id, :en => "Email Address" %></td>
          <td>
            <%= text_field :pseudonym, :unique_id, :value => @pseudonym.unique_id %>
            <div style="font-size: 0.8em;"><%= t 'tips.login', "This is the email address you will use to login." %></div>
          </td>
        </tr>
        <tr>
          <td><%= blabel :user, :name, :en => "Full Name" %></td>
          <td>
            <%= text_field :user, :name, :value => (@user.name == @user.email ? "" : @user.name) %>
            <div style="font-size: 0.8em;"><%= t 'tips.name', "Teachers will use this name for grading." %></div>
          </td>
        </tr><tr>
          <td><%= blabel :user, :short_name, :en => "Short Name" %></td>
          <td>
            <%= text_field :user, :short_name, :value => params[:short_name] || (@user.short_name && !@user.short_name.blank? && @user.short_name) || @user.name %>
            <div style="font-size: 0.8em;"><%= t 'tips.short_name', "People will see this name in discussions, messages and comments." %></div>
          </td>
        </tr><tr>
          <td><%= blabel :user, :time_zone, :en => "Time Zone" %></td>
          <td><%= time_zone_select :user, :time_zone, ActiveSupport::TimeZone.us_zones, :default => ((@root_account.default_time_zone) || "Mountain Time (US & Canada)"), :value => @user.time_zone %></td>
        </tr><tr>
          <td><%= form.blabel :password, :en => "Password" %></td>
          <td><%= form.password_field :password %></td>
        </tr><tr>
          <td><%= form.blabel :password_confirmation, :en => "Confirm Password"%></td>
          <td><%= form.password_field :password_confirmation %></td>
        </tr>
        <% if @root_account == Account.default %>
          <tr>
            <td colspan="2">
              <%= check_box :user, :subscribe_to_emails, :checked => true %>
              <%= label :user, :subscribe_to_emails, :en => "I want to receive information, news and tips from Instructure" %>
            </td>
          </tr>
        <% end %>
      </table>
      <button style="margin-top:-43px" type="submit" class="button"><%= t 'buttons.register', "Register" %></button>
      <% end %>
    <% end %>

    <% unless @merge_opportunities.empty? %>
      <h4><%= @course ? t('titles.merge_opportunities_course', "Accept With Another Account") : t('titles.merge_opportunities', "Merge With Another Account") %></h4>
      <p><%= if @course
            t('details.merge_others_course', { :one => "The invitation for %{course} is for %{user}, but another account exists with the same e-mail address. You can accept the invitation using that account by clicking it below.",
                    :other => "The invitation for %{course} is for %{user}, but other accounts exist with the same e-mail address. You can accept the invitation with another account by clicking it below." },
             :course => @course.name, :user => @communication_channel.user.name, :count => @merge_opportunities.length)
          else
              t('details.merge_others', { :one => "The email address %{email} belongs to %{user}, but another account exists with the same e-mail address. You can merge the two accounts together by clicking it below.",
                      :other => "The email address %{email} belongs to %{user}, but other accounts exist with the same e-mail address. You can merge %{user} with another account by clicking one below." },
               :email => @communication_channel.path, :user => @communication_channel.user.name, :count => @merge_opportunities.length)
          end
          %>
      </p>
      <ul>
        <% @merge_opportunities.each do |user| %>
          <% account_pseudonyms = user.pseudonyms.inject({}) do |result, p|
              next(result) unless p.active?
              (result[p.account] ||= []) << p
              result
             end %>
          <% query_params = {} %>
          <% query_params = { :enrollment => @enrollment.uuid } if @enrollment %>
          <li>
            <% if account_pseudonyms.length == 1 %>
              <% pseudonyms = account_pseudonyms.first %>
              <% sis_pseudonym = pseudonyms.detect { |p| p.sis_user_id } %>
              <% pseudonym = sis_pseudonym || pseudonyms.first %>
              <% display_name = sis_pseudonym ? "#{user.name} (#{sis_pseudonym.unique_id})" : user.name %>
              <%= link_to display_name, login_url({ :host => HostUrl.context_host(accounts.first), :confirm => @communication_channel.confirmation_code, :unique_id => pseudonym.unique_id }.merge(query_params)) %>
            <% else %>
              <%= user.name %>
              <ul>
                <% account_pseudonyms.each do |account, pseudonyms| %>
                  <% sis_pseudonym = pseudonyms.detect { |p| p.sis_user_id } %>
                  <% pseudonym = sis_pseudonym || pseudonyms.first %>
                  <% url = link_to(account.name, login_url({ :host => HostUrl.context_host(account), :confirm => @communication_channel.confirmation_code, :unique_id => pseudonym.unique_id }.merge(query_params))) %>
                  <li><%= sis_pseudonym ? t(:merge_login_link_with_id, 'Login at %{institution} (%{username})', :institution => url, :username => sis_pseudonym.unique_id) :
                    t(:merge_login_link, 'Login at %{institution}', :institution => url) %></li>
                <% end %>
              </ul>
            <% end %>
          </li>
        <% end %>
      </ul>
    <% end %>
  </div>
</div>
<div id="modal-box-bottom"></div>

<% js_block :i18n_scope => 'pseudonyms.regisration_confirmation' do %>
<script type="text/javascript">
$(document).ready(function() {
  $("#registration_confirmation_form :text:first").focus().select();
  $("#registration_confirmation_form").submit(function(event) {
    var data = $(this).getFormData();
    success = true;
    if(!data['user[name]']) {
      $(this).formErrors({
        'user[name]': I18n.t('errors.user_name_required', "User name is required")
      });
      success = false;
    } else if(!data['user[short_name]']) {
      $(this).formErrors({
        unique_id: I18n.t('errors.short_name_required', "Short name is required")
      });
      success = false;
    } else if(!data["pseudonym[password]"] || !data["pseudonym[password]"].length) {
      $(this).formErrors({
        "pseudonym[password]": I18n.t('errors.password_required', "Password required")
      });
      success = false;
    } else if(data["pseudonym[password]"].length < 6) {
      $(this).formErrors({
        "pseudonym[password]": I18n.t('errors.password_too_short', "Password too short")
      });
      success = false;
    } else if(data["pseudonym[password]"] != data["pseudonym[password_confirmation]"]) {
      $(this).formErrors({
        "pseudonym[password_confirmation]": I18n.t('errors.passwords_dont_match', "Passwords don't match")
      });
      success = false;
    }
    return success;
  });
});
</script>
<% end %>
